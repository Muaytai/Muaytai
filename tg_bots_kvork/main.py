import asyncio
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, ConversationHandler
)
from typing import Dict, Any
import os
from dotenv import load_dotenv
import sqlite3
from datetime import datetime, timedelta
import re

load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CHANNEL_ID = os.getenv('CHANNEL_ID')

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
CONTACT = 1
CITY = 2
VERIFICATION_CHOICE = 3

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
CHOOSE_TYPE = 4
CHOOSE_CITY = 5
CONTENT = 6
IMAGE = 7
SALARY = 8
HASHTAGS = 9
CONFIRMATION = 10

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
PROFILE_MENU = 11
CHANGE_CITY = 12
ADD_BALANCE = 13
TRANSFER_BALANCE = 14
MY_ADS = 15

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
SEARCH_MENU = 16
SEARCH_TYPE = 17
SEARCH_CITY = 18
SEARCH_HASHTAG = 19
SEARCH_PRICE = 20

AD_TYPES = {
    "‚≠êÔ∏è –í–û–ü–†–û–° ‚≠êÔ∏è": {"price": 0, "code": "question"},
    "üíé –ë–ê–†–ê–•–û–õ–ö–ê üíé": {"price": 0, "code": "market"},
    "üë®‚Äçüíº –í–ê–ö–ê–ù–°–ò–ò üë©‚Äçüíº": {"price": 0, "code": "job"},
    "üè¢ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨ üè†": {"price": 0, "code": "realty"},
    "üöó –ê–í–¢–û-–ú–û–¢–û üèç": {"price": 0, "code": "auto"},
    "üêæ –ñ–ò–í–û–¢–ù–´–ï üå∫": {"price": 0, "code": "pets"},
    "‚ú® –£–°–õ–£–ì–ò ‚ú®": {"price": 10000, "code": "services"},
    "üí´ –î–õ–Ø –ë–ò–ó–ù–ï–°–ê üí´": {"price": 15000, "code": "business"}
}

ALLOWED_DOMAINS = [
    "facebook.com",
    "instagram.com",
    "vk.com",
    "ok.ru"
]

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            phone TEXT,
            city TEXT,
            balance REAL DEFAULT 0,
            is_verified BOOLEAN DEFAULT FALSE,
            verification_requested BOOLEAN DEFAULT FALSE,
            last_free_post TIMESTAMP,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ä–æ–¥–æ–≤
    c.execute('''
        CREATE TABLE IF NOT EXISTS cities (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS ads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            city TEXT,
            content TEXT,
            image_file_id TEXT,
            salary TEXT,
            hashtags TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if update.effective_chat.type != 'private':
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:\n"
            "@tgkvork_bot"
        )
        return ConversationHandler.END
        
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    conn.close()
    
    if user:
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        if not CHANNEL_ID:
            print("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            raise ValueError("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ['left', 'kicked']:
            channel_link = CHANNEL_ID[4:] if CHANNEL_ID.startswith('-100') else CHANNEL_ID
            keyboard = [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{channel_link}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        pass

    # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        reply_markup=reply_markup
    )
    return CONTACT

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ["üåü –°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚ú®", "üîç –ü–û–ò–°–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô üéØ"],
        ["üìπ –í–ò–î–ï–û-–ò–ù–°–¢–†–£–ö–¶–ò–Ø üé•", "üë§ –ú–û–ô –ü–†–û–§–ò–õ–¨ üí´"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = update.message.contact
    user_id = update.effective_user.id
    
    if contact.user_id != user_id:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∞ –Ω–µ —á—É–∂–∏–º.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]], 
            resize_keyboard=True)
        )
        return CONTACT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data['phone'] = contact.phone_number
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("SELECT name FROM cities ORDER BY name")
    cities = c.fetchall()
    conn.close()
    
    if not cities:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
        default_cities = ["–°–µ—É–ª", "–ü—É—Å–∞–Ω", "–ò–Ω—á—Ö–æ–Ω", "–¢—ç–≥—É", "–¢—ç–¥–æ–Ω", "–ö–≤–∞–Ω–¥–∂", "–£–ª—å—Å–∞–Ω"]
        conn = sqlite3.connect('board.db')
        c = conn.cursor()
        for city in default_cities:
            c.execute("INSERT OR IGNORE INTO cities (name) VALUES (?)", (city,))
        conn.commit()
        cities = [(city,) for city in default_cities]
        conn.close()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    keyboard = [[city[0]] for city in cities]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=reply_markup
    )
    return CITY

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username
    phone = context.user_data.get('phone')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("SELECT name FROM cities WHERE name = ?", (city,))
    if not c.fetchone():
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        conn.close()
        return CITY

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    c.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user_exists = c.fetchone()
    
    if user_exists:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        c.execute("""
            UPDATE users 
            SET username = ?, phone = ?, city = ?
            WHERE user_id = ?
        """, (username, phone, city, user_id))
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        c.execute("""
            INSERT INTO users (user_id, username, phone, city)
            VALUES (?, ?, ?, ?)
        """, (user_id, username, phone, city))
    
    conn.commit()
    conn.close()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    keyboard = [
        [InlineKeyboardButton("–î–∞, —Ö–æ—á—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data="verify_yes")],
        [InlineKeyboardButton("–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="verify_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –±–∏–∑–Ω–µ—Å–∞?\n"
        "–≠—Ç–æ –¥–∞—Å—Ç –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–º–µ—Ç–∫—É ‚úÖ –Ω–∞ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.",
        reply_markup=reply_markup
    )
    return VERIFICATION_CHOICE

async def handle_verification_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "verify_yes":
        conn = sqlite3.connect('board.db')
        c = conn.cursor()
        c.execute("""
            UPDATE users 
            SET verification_requested = TRUE 
            WHERE user_id = ?
        """, (query.from_user.id,))
        conn.commit()
        conn.close()
        
        await query.edit_message_text(
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: 50,000 KRW"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [
            ["üåü –°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚ú®", "üîç –ü–û–ò–°–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô üéØ"],
            ["üìπ –í–ò–î–ï–û-–ò–ù–°–¢–†–£–ö–¶–ò–Ø üé•", "üë§ –ú–û–ô –ü–†–û–§–ò–õ–¨ üí´"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text(
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–∑–∂–µ –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [
            ["üåü –°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚ú®", "üîç –ü–û–ò–°–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô üéØ"],
            ["üìπ –í–ò–î–ï–û-–ò–ù–°–¢–†–£–ö–¶–ò–Ø üé•", "üë§ –ú–û–ô –ü–†–û–§–ò–õ–¨ üí´"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END

async def create_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("""
        SELECT last_free_post, is_verified 
        FROM users 
        WHERE user_id = ?
    """, (user_id,))
    user_data = c.fetchone()
    conn.close()
    
    if user_data:
        last_post, is_verified = user_data
        if last_post:
            last_post_time = datetime.fromisoformat(last_post)
            if datetime.now() - last_post_time < timedelta(hours=3) and not is_verified:
                await update.message.reply_text(
                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ 3 —á–∞—Å–∞.\n"
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é."
                )
                return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    keyboard = [[type_name] for type_name in AD_TYPES.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return CHOOSE_TYPE

async def handle_ad_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    ad_type = update.message.text
    user_id = update.effective_user.id
    
    if ad_type not in AD_TYPES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_TYPE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if AD_TYPES[ad_type]["price"] > 0:
        conn = sqlite3.connect('board.db')
        c = conn.cursor()
        c.execute("SELECT is_verified, balance FROM users WHERE user_id = ?", (user_id,))
        user_data = c.fetchone()
        conn.close()
        
        if not user_data[0]:  # –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            await update.message.reply_text(
                "–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è.\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."
            )
            return ConversationHandler.END
        
        if user_data[1] < AD_TYPES[ad_type]["price"]:  # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
            await update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {AD_TYPES[ad_type]['price']} KRW\n"
                "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
            )
            return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    context.user_data['ad_type'] = ad_type
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("SELECT name FROM cities ORDER BY name")
    cities = c.fetchall()
    conn.close()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    keyboard = [[city[0]] for city in cities]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return CHOOSE_CITY

async def handle_city_for_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    city = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("SELECT name FROM cities WHERE name = ?", (city,))
    if not c.fetchone():
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return CHOOSE_CITY
    conn.close()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    context.user_data['ad_city'] = city
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        "‚ùóÔ∏è –ü—Ä–∞–≤–∏–ª–∞:\n"
        "1. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏\n"
        "2. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø\n"
        "3. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    return CONTENT

def check_links(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ"""
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ URL –≤ —Ç–µ–∫—Å—Ç–µ
    urls = re.findall(r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+[^\s]*', text)
    
    for url in urls:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ URL —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
        allowed = False
        for domain in ALLOWED_DOMAINS:
            if domain in url.lower():
                allowed = True
                break
        if not allowed:
            return False
    return True

async def handle_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    content = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏
    if not check_links(content):
        await update.message.reply_text(
            "‚ö†Ô∏è –í —Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏!\n\n"
            "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å–∞–π—Ç—ã:\n" +
            "\n".join(f"- {domain}" for domain in ALLOWED_DOMAINS) +
            "\n\n–ü–æ–∂–∞ÔøΩÔøΩ—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return CONTENT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    context.user_data['ad_content'] = content
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=reply_markup
    )
    return IMAGE

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    context.user_data['image_file_id'] = photo.file_id
    
    # –ï—Å–ª–∏ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –≤–∞–∫–∞–Ω—Å–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
    if context.user_data['ad_type'] == "üë∑‚Äçüíº –í–ê–ö–ê–ù–°–ò–ò üë©‚Äçüíº":
        keyboard = [
            ["–í —á–∞—Å", "–í –¥–µ–Ω—å", "–í –Ω–µ–¥–µ–ª—é"],
            ["–í –º–µ—Å—è—Ü", "–í –≥–æ–¥", "–°–¥–µ–ª—å–Ω–æ"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup
        )
        return SALARY
    else:
        return await request_hashtags(update, context)

async def skip_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    context.user_data['image_file_id'] = None
    
    if context.user_data['ad_type'] == "üë∑‚Äçüíº –í–ê–ö–ê–ù–°–ò–ò üë©‚Äçüíº":
        keyboard = [
            ["–í —á–∞—Å", "–í –¥–µ–Ω—å", "–í –Ω–µ–¥–µ–ª—é"],
            ["–í –º–µ—Å—è—Ü", "–í –≥–æ–¥", "–°–¥–µ–ª—å–Ω–æ"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup
        )
        return SALARY
    else:
        return await request_hashtags(update, context)

async def handle_salary_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    period = update.message.text
    context.user_data['salary_period'] = period
    
    keyboard = [["–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã (–≤ KRW)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2500000\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω'",
        reply_markup=reply_markup
    )
    return SALARY + 1  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã

async def handle_salary_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    text = update.message.text
    
    if text == "–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω":
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç—ã (–≤ KRW):"
        )
        context.user_data['salary_range'] = True
        return SALARY + 2  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    
    try:
        amount = int(text)
        context.user_data['salary'] = f"{amount:,} KRW {context.user_data['salary_period']}"
        return await request_hashtags(update, context)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return SALARY + 1

async def handle_salary_min(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    try:
        min_amount = int(update.message.text)
        context.user_data['salary_min'] = min_amount
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç—ã (–≤ KRW):"
        )
        return SALARY + 3  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return SALARY + 2

async def handle_salary_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    try:
        max_amount = int(update.message.text)
        min_amount = context.user_data['salary_min']
        if max_amount < min_amount:
            await update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.")
            return SALARY + 3
        
        context.user_data['salary'] = f"–æ—Ç {min_amount:,} –¥–æ {max_amount:,} KRW {context.user_data['salary_period']}"
        return await request_hashtags(update, context)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return SALARY + 3

async def request_hashtags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Ö—ç—à—Ç–µ–≥–æ–≤"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: #—Ä–∞–±–æ—Ç–∞, #–≤–∞–∫–∞–Ω—Å–∏—è, #—Å–µ—É–ª"
    )
    return HASHTAGS

async def handle_hashtags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤"""
    hashtags = update.message.text
    # –î–æ–±–∞–≤–ª—è–µ–º # –∫ —Ç–µ–≥–∞–º, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    tags = [tag.strip() if tag.strip().startswith('#') else f'#{tag.strip()}' 
            for tag in hashtags.split(',')]
    context.user_data['hashtags'] = ' '.join(tags)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    preview = f"{context.user_data['ad_type']}\n\n"
    preview += f"üåÜ –ì–æ—Ä–æ–¥: {context.user_data['ad_city']}\n\n"
    preview += context.user_data['ad_content']
    preview += "\n\nüí¨ –í–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö üîΩ\n\n"
    
    if 'salary' in context.user_data:
        preview += f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {context.user_data['salary']}\n\n"
    
    preview += context.user_data['hashtags']
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    if context.user_data.get('image_file_id'):
        await update.message.reply_photo(
            photo=context.user_data['image_file_id'],
            caption=preview,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            preview,
            reply_markup=reply_markup
        )
    
    return CONFIRMATION

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "publish":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['ad_type', 'ad_city', 'ad_content', 'hashtags']
            for field in required_fields:
                if field not in context.user_data:
                    await query.edit_message_text(
                        f"–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({field}). "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
                    )
                    return ConversationHandler.END
            
            # –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            result = await publish_ad(update, context)
            if result:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                await query.message.delete()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text="‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                keyboard = [
                    ["üåü –°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚ú®", "üîç –ü–û–ò–°ÔøΩÔøΩ –û–ë–™–Ø–í–õ–ï–ù–ò–ô üéØ"],
                    ["üìπ –í–ò–î–ï–û-–ò–ù–°–¢–†–£–ö–¶–ò–Ø üé•", "üë§ –ú–û–ô –ü–†–û–§–ò–õ–¨ üí´"]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text="‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        else:
            await query.message.delete()
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                ["üåü –°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚ú®", "üîç –ü–û–ò–°–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô üéØ"],
                ["üìπ –í–ò–î–ï–û-–ò–ù–°–¢–†–£–ö–¶–ò–Ø üé•", "üë§ –ú–û–ô –ü–†–û–§–ò–õ–¨ üí´"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        
        return ConversationHandler.END
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END

async def publish_ad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('board.db')
        c = conn.cursor()
        c.execute("SELECT is_verified FROM users WHERE user_id = ?", (user_id,))
        user_data = c.fetchone()
        is_verified = user_data[0] if user_data else False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        ad_text = f"{context.user_data['ad_type']}\n\n"
        if is_verified:
            ad_text += "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n"
        ad_text += f"üåÜ –ì–æ—Ä–æ–¥: {context.user_data['ad_city']}\n\n"
        ad_text += context.user_data['ad_content']
        ad_text += "\n\nüí¨ –í–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö üîΩ\n\n"
        
        if 'salary' in context.user_data:
            ad_text += f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {context.user_data['salary']}\n\n"
        
        ad_text += context.user_data['hashtags']
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É"
        keyboard = [[InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url=f"https://t.me/{query.from_user.username}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        if context.user_data.get('image_file_id'):
            message = await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=context.user_data['image_file_id'],
                caption=ad_text,
                reply_markup=reply_markup
            )
        else:
            message = await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=ad_text,
                reply_markup=reply_markup
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        c.execute("""
            INSERT INTO ads (user_id, type, city, content, image_file_id, salary, hashtags, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, 'published')
        """, (
            user_id,
            context.user_data['ad_type'],
            context.user_data['ad_city'],
            context.user_data['ad_content'],
            context.user_data.get('image_file_id'),
            context.user_data.get('salary'),
            context.user_data['hashtags']
        ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –±–∞–ª–∞–Ω—Å
        ad_type = context.user_data['ad_type']
        if AD_TYPES[ad_type]["price"] > 0:
            c.execute("""
                UPDATE users 
                SET balance = balance - ?
                WHERE user_id = ?
            """, (AD_TYPES[ad_type]["price"], user_id))
        else:
            c.execute("""
                UPDATE users 
                SET last_free_post = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (user_id,))
        
        conn.commit()
        conn.close()
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        return False

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("""
        SELECT city, balance, is_verified, verification_requested
        FROM users 
        WHERE user_id = ?
    """, (user_id,))
    user_data = c.fetchone()
    conn.close()
    
    if not user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    city, balance, is_verified, verification_requested = user_data
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
    profile_text += f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
    profile_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:,} KRW\n"
    profile_text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if is_verified else '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = [
        ["üåÜ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"],
        ["üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üí∞ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if not is_verified and not verification_requested:
        keyboard.insert(0, ["‚úÖ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(profile_text, reply_markup=reply_markup)
    return PROFILE_MENU

async def handle_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    choice = update.message.text
    
    if choice == "üåÜ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
        return await show_my_ads(update, context)
        
    elif choice == "üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        conn = sqlite3.connect('board.db')
        c = conn.cursor()
        c.execute("SELECT name FROM cities ORDER BY name")
        cities = c.fetchall()
        conn.close()
        
        keyboard = [[city[0]] for city in cities]
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:",
            reply_markup=reply_markup
        )
        return CHANGE_CITY
    
    elif choice == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ KRW:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000"
        )
        return ADD_BALANCE
    
    elif choice == "üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 50000"
        )
        return TRANSFER_BALANCE
    
    elif choice == "‚úÖ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é":
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_verification")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_verification")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: 50,000 KRW\n"
            "–ü–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚úÖ –û—Ç–º–µ—Ç–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n"
            "‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "‚úÖ –°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=reply_markup
        )
        return VERIFICATION_CHOICE
    
    elif choice == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
        return ConversationHandler.END

    return PROFILE_MENU

async def show_my_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    c.execute("""
        SELECT id, type, city, content, status, created_at
        FROM ads 
        WHERE user_id = ?
        ORDER BY created_at DESC
        LIMIT 5
    """, (user_id,))
    ads = c.fetchall()
    conn.close()
    
    if not ads:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return PROFILE_MENU
    
    for ad in ads:
        ad_id, ad_type, city, content, status, created_at = ad
        text = f"üìå –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}\n"
        text += f"–¢–∏–ø: {ad_type}\n"
        text += f"–ì–æ—Ä–æ–¥: {city}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        text += f"–°–æ–∑–¥–∞–Ω–æ: {created_at}\n\n"
        text += f"–¢–µ–∫—Å—Ç: {content[:100]}..."
        
        await update.message.reply_text(text)
    
    return PROFILE_MENU

async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        amount = int(update.message.text)
        if amount <= 0:
            raise ValueError
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
        payment_id = f"PAY{update.effective_user.id}_{int(datetime.now().timestamp())}"
        
        await update.message.reply_text(
            f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount:,} KRW:\n\n"
            "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —Å—á–µ—Ç:\n"
            "KB Bank: 123-456-789\n"
            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: HONG GIL DONG\n\n"
            f"2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
            "3. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n\n"
            "‚ùó –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )
        return PROFILE_MENU
        
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
        )
        return ADD_BALANCE

async def handle_balance_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        user_id, amount = update.message.text.split()
        target_id = int(user_id)
        amount = int(amount)
        
        if amount <= 0:
            raise ValueError
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        conn = sqlite3.connect('board.db')
        c = conn.cursor()
        
        c.execute("SELECT balance FROM users WHERE user_id = ?", (update.effective_user.id,))
        sender_balance = c.fetchone()
        
        if not sender_balance or sender_balance[0] < amount:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            conn.close()
            return PROFILE_MENU
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        c.execute("SELECT username FROM users WHERE user_id = ?", (target_id,))
        target_user = c.fetchone()
        
        if not target_user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            conn.close()
            return PROFILE_MENU
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        c.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", 
                 (amount, update.effective_user.id))
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", 
                 (amount, target_id))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount:,} KRW –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        )
        
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 50000"
        )
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
    
    return PROFILE_MENU

async def search_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    keyboard = [
        ["üîç –ü–æ —Ç–∏–ø—É", "üåÜ –ü–æ –≥–æ—Ä–æ–¥—É"],
        ["#Ô∏è‚É£ –ü–æ —Ö—ç—à—Ç–µ–≥—É", "üí∞ –ü–æ —Ü–µ–Ω–µ"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    return SEARCH_MENU

async def handle_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é ÔøΩÔøΩ–æ–∏—Å–∫–∞"""
    choice = update.message.text
    
    if choice == "üîç –ü–æ —Ç–∏–ø—É":
        keyboard = [[type_name] for type_name in AD_TYPES.keys()]
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return SEARCH_TYPE
    
    elif choice == "üåÜ –ü–æ –≥–æ—Ä–æ–¥—É":
        conn = sqlite3.connect('board.db')
        c = conn.cursor()
        c.execute("SELECT name FROM cities ORDER BY name")
        cities = c.fetchall()
        conn.close()
        
        keyboard = [[city[0]] for city in cities]
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=reply_markup
        )
        return SEARCH_CITY
    
    elif choice == "#Ô∏è‚É£ –ü–æ —Ö—ç—à—Ç–µ–≥—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ #):"
        )
        return SEARCH_HASHTAG
    
    elif choice == "üí∞ –ü–æ —Ü–µ–Ω–µ":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –º–∏–Ω –º–∞–∫—Å\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2000000 3000000"
        )
        return SEARCH_PRICE
    
    elif choice == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
        return ConversationHandler.END

async def show_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, params: tuple):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    conn = sqlite3.connect('board.db')
    c = conn.cursor()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        c.execute(query, params)
        ads = c.fetchall()
        
        if not ads:
            await update.message.reply_text(
                "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
            return SEARCH_MENU
        
        for ad in ads[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            ad_text = f"{ad[2]}\n\n"  # –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            ad_text += f"üåÜ –ì–æ—Ä–æ–¥: {ad[3]}\n\n"  # –ì–æ—Ä–æ–¥
            ad_text += f"{ad[4][:200]}..."  # –¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
            
            if ad[6]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–∞
                ad_text += f"\n\nüí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {ad[6]}"
            
            # –ü–æ–ª—É—á–∞–µ–º username –∞–≤—Ç–æ—Ä–∞
            c.execute("SELECT username FROM users WHERE user_id = ?", (ad[1],))
            user = c.fetchone()
            username = user[0] if user and user[0] else "tgkvork_bot"
            
            keyboard = [[InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url=f"https://t.me/{username}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if ad[5]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                try:
                    await update.message.reply_photo(
                        photo=ad[5],
                        caption=ad_text,
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    await update.message.reply_text(
                        ad_text,
                        reply_markup=reply_markup
                    )
            else:
                await update.message.reply_text(
                    ad_text,
                    reply_markup=reply_markup
                )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    finally:
        conn.close()
    
    return SEARCH_MENU

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}')

# –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async def send_channel_greeting(context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url="https://t.me/tgkvork_bot")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text="–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É: @tgkvork_bot\n\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=reply_markup
    )

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
async def handle_channel_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ"""
    if update.channel_post:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        await context.bot.delete_message(
            chat_id=update.channel_post.chat_id,
            message_id=update.channel_post.message_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = [[InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url="https://t.me/tgkvork_bot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=update.channel_post.chat_id,
            text="–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É: @tgkvork_bot\n\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
            reply_markup=reply_markup
        )

def main():
    try:
        if not BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not ADMIN_ID:
            raise ValueError("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            
        application = Application.builder().token(BOT_TOKEN).build()
        init_db()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –°–æ–∑–¥–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                MessageHandler(filters.Regex("^üåü –°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚ú®$"), create_ad),
                MessageHandler(filters.Regex("^üë§ –ú–û–ô –ü–†–û–§–ò–õ–¨ üí´$"), profile),
                MessageHandler(filters.Regex("^üîç –ü–û–ò–°–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô üéØ$"), search_ads),
            ],
            states={
                CONTACT: [MessageHandler(filters.CONTACT, handle_contact)],
                CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)],
                VERIFICATION_CHOICE: [CallbackQueryHandler(handle_verification_choice)],
                CHOOSE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ad_type)],
                CHOOSE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_for_ad)],
                CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_content)],
                IMAGE: [
                    MessageHandler(filters.PHOTO, handle_image),
                    MessageHandler(filters.Regex("^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$"), skip_image)
                ],
                SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_salary_period)],
                SALARY + 1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_salary_amount)],
                SALARY + 2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_salary_min)],
                SALARY + 3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_salary_max)],
                HASHTAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_hashtags)],
                CONFIRMATION: [CallbackQueryHandler(handle_confirmation)],
                PROFILE_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_menu)],
                CHANGE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)],
                ADD_BALANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_balance)],
                TRANSFER_BALANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_balance_transfer)],
                MY_ADS: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_my_ads)],
                SEARCH_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_menu)],
                SEARCH_TYPE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, 
                        lambda u, c: show_search_results(u, c, 
                        "SELECT * FROM ads WHERE type = ? AND status = 'published' ORDER BY created_at DESC", 
                        (u.message.text,)))
                ],
                SEARCH_CITY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND,
                        lambda u, c: show_search_results(u, c,
                        "SELECT * FROM ads WHERE city = ? AND status = 'published' ORDER BY created_at DESC", 
                        (u.message.text,)))
                ],
                SEARCH_HASHTAG: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND,
                        lambda u, c: show_search_results(u, c,
                        "SELECT * FROM ads WHERE hashtags LIKE ? AND status = 'published' ORDER BY created_at DESC", 
                        (f"%#{u.message.text}%",)))
                ],
                SEARCH_PRICE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND,
                        lambda u, c: show_search_results(u, c,
                        "SELECT * FROM ads WHERE salary LIKE ? AND status = 'published' ORDER BY created_at DESC",
                        (f"%{u.message.text}%",)))
                ]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ (–¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ conv_handler)
        application.add_handler(MessageHandler(
            filters.ChatType.CHANNEL & filters.TEXT,
            handle_channel_message
        ))
        
        application.add_handler(conv_handler)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
