import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ConversationHandler, CallbackQueryHandler, ContextTypes
)
import os

from config.settings import BOT_TOKEN, ADMIN_USERNAME, CHANNEL_ID
from database.db import Database
from states.states import States
from keyboards.keyboards import get_main_menu
from handlers.ads import (
    create_ad, handle_ad_type, handle_active_ads, 
    handle_pending_ads, handle_rejected_ads, 
    handle_ads_stats, handle_ad_content, handle_ad_photo,
    handle_ad_price, handle_ad_hashtags
)
from handlers.profile import (
    handle_profile, handle_balance, handle_profile_menu,
    handle_my_ads, handle_change_city, handle_transfer_balance, 
    handle_main_menu, handle_change_contact, handle_security,
    handle_history, handle_payment_history, handle_add_balance,
    handle_withdraw, handle_promo, handle_buy_pro
)
from handlers.search import handle_search_menu, show_search_results
from handlers.rules import show_rules
from handlers.help import (
    show_help, show_rules, show_faq,
    show_contacts, handle_support,
    handle_support_message
)
from handlers.verification import handle_verification
from handlers.admin import handle_moderation_callback

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_file = 'board.db'
db = Database(db_file)

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if not os.path.exists(db_file):
    db.init_db()
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    from tests.test_data import create_test_data
    create_test_data()
else:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    db.init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    if update.effective_chat.type != 'private':
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:\n"
            "@tgkvork_bot"
        )
        return ConversationHandler.END
        
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–∏—à–µ–ª –ø–æ –∫–Ω–æ–ø–∫–µ "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        if context.args and context.args[0] == "post":
            return await create_ad(update, context)
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        reply_markup = get_main_menu()
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return States.MAIN_MENU
    
    # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    keyboard = [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        reply_markup=reply_markup
    )
    return States.CONTACT

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = update.message.contact
    if contact.user_id != update.effective_user.id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return States.CONTACT
    
    context.user_data['phone'] = contact.phone_number
    
    reply_markup = ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=reply_markup
    )
    return States.CITY

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = update.message.text
    
    if not db.city_exists(city):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return States.CITY
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    username = update.effective_user.username or "user"
    phone = context.user_data.get('phone')
    
    db.add_user(user_id, username, phone, city)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = get_main_menu()
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}')
    if update:
        print(f'Update: {update}')
    if context:
        print(f'Context: {context}')

async def handle_channel_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ"""
    if update.channel_post:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.delete_message(
            chat_id=update.channel_post.chat_id,
            message_id=update.channel_post.message_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = [[InlineKeyboardButton(
            "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", 
            url=f"https://t.me/{context.bot.username}?start=post"
        )]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=update.channel_post.chat_id,
            text="–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É: @tgkvork_bot\n\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
            reply_markup=reply_markup
        )

async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    reply_markup = get_main_menu()
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    reply_markup = get_main_menu()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return States.MAIN_MENU

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
        application.add_handler(MessageHandler(
            filters.ChatType.CHANNEL & filters.TEXT, 
            handle_channel_message
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        application.add_handler(CallbackQueryHandler(
            handle_moderation_callback,
            pattern=r"^(approve|reject)_\d+$"
        ))

        # –°–æ–∑–¥–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                MessageHandler(filters.Regex("^üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ$"), create_ad),
                MessageHandler(filters.Regex("^üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç$"), handle_profile),
                MessageHandler(filters.Regex("^üìä –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è$"), handle_my_ads),
                MessageHandler(filters.Regex("^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), show_help),
                MessageHandler(filters.Regex("^üí∞ –ë–∞–ª–∞–Ω—Å$"), handle_balance),
            ],
            states={
                States.MAIN_MENU: [
                    MessageHandler(filters.Regex("^üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ$"), create_ad),
                    MessageHandler(filters.Regex("^üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç$"), handle_profile),
                    MessageHandler(filters.Regex("^üìä –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è$"), handle_my_ads),
                    MessageHandler(filters.Regex("^üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π$"), handle_search_menu),
                    MessageHandler(filters.Regex("^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), show_help),
                    MessageHandler(filters.Regex("^üí∞ –ë–∞–ª–∞–Ω—Å$"), handle_balance),
                ],
                States.CONTACT: [
                    MessageHandler(filters.CONTACT, handle_contact)
                ],
                States.CITY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)
                ],
                States.PROFILE_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_menu)
                ],
                States.BALANCE_MENU: [
                    MessageHandler(filters.Regex("^üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å$"), handle_add_balance),
                    MessageHandler(filters.Regex("^üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π$"), handle_payment_history),
                    MessageHandler(filters.Regex("^üíé –ö—É–ø–∏—Ç—å PRO$"), handle_buy_pro),
                    MessageHandler(filters.Regex("^üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤$"), handle_withdraw),
                    MessageHandler(filters.Regex("^üéÅ –ü—Ä–æ–º–æ–∫–æ–¥$"), handle_promo),
                ],
                States.ADS_MENU: [
                    MessageHandler(filters.Regex("^üìù –ê–∫—Ç–∏–≤–Ω—ã–µ$"), handle_active_ads),
                    MessageHandler(filters.Regex("^‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏$"), handle_pending_ads),
                    MessageHandler(filters.Regex("^‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ$"), handle_rejected_ads),
                    MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), handle_ads_stats),
                ],
                States.AD_TYPE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ad_type)
                ],
                States.AD_CONTENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ad_content)
                ],
                States.AD_PHOTO: [
                    MessageHandler(filters.PHOTO, handle_ad_photo),
                    MessageHandler(filters.Regex("^/skip$"), handle_ad_photo)
                ],
                States.AD_PRICE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ad_price),
                    MessageHandler(filters.Regex("^/skip$"), handle_ad_price)
                ],
                States.AD_HASHTAGS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ad_hashtags),
                    MessageHandler(filters.Regex("^/skip$"), handle_ad_hashtags)
                ],
            },
            fallbacks=[
                CommandHandler("cancel", handle_cancel),
                MessageHandler(filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_main_menu)
            ]
        )
        
        application.add_handler(conv_handler)
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
