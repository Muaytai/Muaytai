from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from states.states import States
from database.db import Database
from config.settings import AD_SETTINGS, AD_CATEGORIES, ADMIN_USERNAME, CHANNEL_ID
from keyboards.keyboards import get_main_menu, get_ads_menu

db = Database('board.db')

async def show_ads_list(update: Update, ads: list, title: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if not ads:
        await update.message.reply_text(
            f"{title}\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        )
        return States.ADS_MENU
    
    for ad in ads:
        text = (
            f"üìù *{AD_CATEGORIES[ad['type']]['icon']} {ad['content']}*\n\n"
            f"üåÜ –ì–æ—Ä–æ–¥: {ad['city']}\n"
            f"üí∞ –¶–µ–Ω–∞: {ad['price']}\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {ad['views']}\n"
            f"üì± –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {ad['clicks']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {ad['created_at']}\n"
            f"#{ad['hashtags'].replace(' ', ' #') if ad['hashtags'] else ''}"
        )
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown'
        )
    
    reply_markup = get_ads_menu()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return States.ADS_MENU

async def handle_active_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    ads = db.get_user_ads(update.effective_user.id, status='active')
    return await show_ads_list(update, ads, "üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

async def handle_pending_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    ads = db.get_user_ads(update.effective_user.id, status='pending')
    return await show_ads_list(update, ads, "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

async def handle_rejected_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    ads = db.get_user_ads(update.effective_user.id, status='rejected')
    return await show_ads_list(update, ads, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ")

async def handle_ads_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    stats = db.get_user_ads_stats(update.effective_user.id)
    
    await update.message.reply_text(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\n"
        f"üìù –í—Å–µ–≥–æ: {stats['total']}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n"
        f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending']}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {stats['rejected']}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['views']}\n"
        f"üì± –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['clicks']}",
        parse_mode='Markdown'
    )
    
    reply_markup = get_ads_menu()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return States.ADS_MENU

async def create_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if not db.can_post_free_ad(user_id):
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å.\n"
            "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫—É–ø–∏—Ç–µ PRO-–∞–∫–∫–∞—É–Ω—Ç."
        )
        return States.ADS_MENU
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category in AD_CATEGORIES:
        keyboard.append([category])
    keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return States.AD_TYPE

async def handle_ad_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    ad_type = update.message.text
    
    if ad_type not in AD_CATEGORIES:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞"
        )
        return States.AD_TYPE
        
    context.user_data['ad_type'] = ad_type
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    return States.AD_CONTENT

async def handle_ad_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    content = update.message.text
    
    if len(content) < AD_SETTINGS['min_length']:
        await update.message.reply_text(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {AD_SETTINGS['min_length']} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return States.AD_CONTENT
        
    if len(content) > AD_SETTINGS['max_length']:
        await update.message.reply_text(
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {AD_SETTINGS['max_length']} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return States.AD_CONTENT
        
    context.user_data['content'] = content
    
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    return States.AD_PHOTO

async def handle_ad_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    return States.AD_PRICE

async def handle_ad_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if update.message.text != '/skip':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            price = int(update.message.text.replace(',', '').replace(' ', ''))
            context.user_data['price'] = f"{price:,}"
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000 –∏–ª–∏ 2500000"
            )
            return States.AD_PRICE
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    return States.AD_HASHTAGS

async def handle_ad_hashtags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if update.message.text != '/skip':
        hashtags = update.message.text.strip()
        if not all(tag.startswith('#') for tag in hashtags.split()):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à—Ç–µ–≥–æ–≤. –ö–∞–∂–¥—ã–π —Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: #—Ä–∞–±–æ—Ç–∞ #–≤–∞–∫–∞–Ω—Å–∏—è #seoul"
            )
            return States.AD_HASHTAGS
        context.user_data['hashtags'] = hashtags
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    ad_id = db.create_ad(
        user_id=update.effective_user.id,
        ad_type=context.user_data['ad_type'],
        city=db.get_user(update.effective_user.id)['city'],
        content=context.user_data['content'],
        image_file_id=context.user_data.get('photo'),
        price=context.user_data.get('price'),
        hashtags=context.user_data.get('hashtags')
    )
    
    if not ad_id:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return States.MAIN_MENU
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await send_to_moderation(context, ad_id)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: 24 —á–∞—Å–∞",
        reply_markup=get_main_menu()
    )
    return States.MAIN_MENU

async def handle_extend_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /extend <id –æ–±—ä—è–≤–ª–µ–Ω–∏—è>"
        )
        return States.ADS_MENU
        
    ad_id = int(context.args[0])
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ad = db.get_ad(ad_id)
    if not ad or ad['user_id'] != user_id:
        await update.message.reply_text(
            "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        )
        return States.ADS_MENU
    
    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if db.extend_ad(ad_id):
        await update.message.reply_text(
            "‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π"
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        )
    
    return States.ADS_MENU

async def send_to_moderation(context: ContextTypes.DEFAULT_TYPE, ad_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    ad = db.get_ad(ad_id)
    if not ad:
        return
        
    user = db.get_user(ad['user_id'])
    
    text = (
        f"üìù *–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {user['phone']}\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {ad['city']}\n\n"
        f"üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {ad['type']}\n"
        f"üí∞ –¶–µ–Ω–∞: {ad['price'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
        f"*–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*\n{ad['content']}\n\n"
        f"#{ad['hashtags'].replace(' ', ' #') if ad['hashtags'] else ''}"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{ad_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{ad_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_USERNAME,
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if ad['image_file_id']:
            await context.bot.send_photo(
                chat_id=ADMIN_USERNAME,
                photo=ad['image_file_id']
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ... 