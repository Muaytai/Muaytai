from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from telegram.ext import ContextTypes
from datetime import datetime

from states.states import States
from keyboards.keyboards import get_main_menu, get_profile_menu, get_ads_menu, get_balance_menu
from database.db import Database
from utils.templates import Templates
from keyboards.styles import ButtonStyles

db = Database('board.db')

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text(
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return States.END
    
    city, balance, is_verified = user[3], user[4], user[5]  # city, balance, is_verified
    status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if is_verified else "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    
    await update.message.reply_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:,.0f} KRW\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {status}"
    )
    
    reply_markup = get_profile_menu()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return States.PROFILE_MENU

async def handle_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.get_user(update.effective_user.id)
    text = Templates.profile_info(user)
    reply_markup = InlineKeyboardMarkup(ButtonStyles.profile_buttons(user['is_verified']))
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.PROFILE_MENU

async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º"""
    user = db.get_user(update.effective_user.id)
    
    await update.message.reply_text(
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {user[4]:,.0f} KRW\n"
        f"–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: 0 KRW\n\n"
        f"üíé –¢–∞—Ä–∏—Ñ: {'PRO' if user[6] else '–ë–∞–∑–æ–≤—ã–π'}\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {'–ë–µ—Å—Å—Ä–æ—á–Ω–æ' if user[6] else '-'}"
    )
    
    reply_markup = get_balance_menu()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return States.BALANCE_MENU

async def handle_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        reply_markup = get_main_menu()
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return States.END
        
    elif text == "üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ KRW):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000"
        )
        return States.ADD_BALANCE
        
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é"
        )
        return States.PROFILE_MENU 

async def handle_my_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'"""
    user_id = update.effective_user.id
    stats = db.get_user_ads_stats(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await update.message.reply_text(
        f"–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n"
        f"–í—Å–µ–≥–æ: {stats['total_ads']}\n"
        f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['published_ads']}\n"
        f"–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending_ads']}\n"
        f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected_ads']}"
    )
    return States.MAIN_MENU

async def handle_change_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    cities = db.get_cities()
    keyboard = [[city[0]] for city in cities]
    keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:",
        reply_markup=reply_markup
    )
    return States.CHANGE_CITY

async def handle_transfer_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞"""
    await update.message.reply_text(
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    )
    return States.PROFILE_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    reply_markup = get_main_menu()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return States.END 

async def handle_change_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üì± *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞*\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ "
        "–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.\n\n"
        "‚ùóÔ∏è –í–∞–∂–Ω–æ: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.CHANGE_CONTACT 

async def handle_security(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∞–∫–∫–∞—É–Ω—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="change_password"),
            InlineKeyboardButton("üì± –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="2fa")
        ],
        [
            InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤", callback_data="login_history"),
            InlineKeyboardButton("üîí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", callback_data="active_sessions")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{'='*35}\n"
        f"üîê *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å*\n"
        f"{'='*35}\n\n"
        f"üîë *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        f"‚Ä¢ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: 1\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        f"{'='*35}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.SECURITY_MENU 

async def handle_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    user_id = update.effective_user.id
    operations = db.get_user_operations(user_id)
    
    if not operations:
        await update.message.reply_text(
            "üìã *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π",
            parse_mode='Markdown'
        )
        return States.PROFILE_MENU
    
    text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n"
    for op in operations:
        text += (
            f"{'‚ûï' if op['type'] == 'deposit' else '‚ûñ'} "
            f"{op['amount']:,.0f} KRW - "
            f"{op['description']}\n"
            f"üìÖ {op['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.PROFILE_MENU

async def handle_payment_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π"""
    user_id = update.effective_user.id
    payments = db.get_user_payments(user_id)
    
    if not payments:
        await update.message.reply_text(
            "üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π",
            parse_mode='Markdown'
        )
        return States.BALANCE_MENU
    
    text = "üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
    for payment in payments:
        text += (
            f"{'‚úÖ' if payment['status'] == 'completed' else '‚è≥'} "
            f"{payment['amount']:,.0f} KRW - "
            f"{payment['type']}\n"
            f"üìÖ {payment['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.BALANCE_MENU

async def handle_add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    await update.message.reply_text(
        "üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ KRW):\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 KRW\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1,000,000 KRW",
        parse_mode='Markdown'
    )
    return States.ADD_BALANCE

async def handle_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    user = db.get_user(update.effective_user.id)
    
    if user['balance'] < 50000:
        await update.message.reply_text(
            "‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50,000 KRW",
            parse_mode='Markdown'
        )
        return States.BALANCE_MENU
    
    await update.message.reply_text(
        "üí∞ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ KRW):\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50,000 KRW\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ: {:,.0f} KRW".format(user['balance']),
        parse_mode='Markdown'
    )
    return States.WITHDRAW

async def handle_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await update.message.reply_text(
        "üéÅ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        parse_mode='Markdown'
    )
    return States.PROMO_CODE 

async def handle_buy_pro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∫–∞ PRO-–∞–∫–∫–∞—É–Ω—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(f"1 –º–µ—Å—è—Ü - {PRO_PRICES['1_month']:,} KRW", callback_data="pro_1_month")],
        [InlineKeyboardButton(f"3 –º–µ—Å—è—Ü–∞ - {PRO_PRICES['3_months']:,} KRW", callback_data="pro_3_months")],
        [InlineKeyboardButton(f"6 –º–µ—Å—è—Ü–µ–≤ - {PRO_PRICES['6_months']:,} KRW", callback_data="pro_6_months")],
        [InlineKeyboardButton(f"12 –º–µ—Å—è—Ü–µ–≤ - {PRO_PRICES['12_months']:,} KRW", callback_data="pro_12_months")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üíé *–¢–∞—Ä–∏—Ñ—ã PRO-–∞–∫–∫–∞—É–Ω—Ç–∞*\n\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n"
        "‚Ä¢ –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.PRO_MENU 

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    username = update.effective_user.username or "user"
    phone = context.user_data.get('phone')
    
    db.add_user(user_id, username, phone, city)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = get_main_menu()
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END 