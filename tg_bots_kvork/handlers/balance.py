from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from states.states import States
from database.db import Database
from config.settings import ADMIN_USERNAME, PRO_PRICES
from utils.templates import Templates
from keyboards.styles import ButtonStyles

db = Database('board.db')

async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º"""
    user = db.get_user(update.effective_user.id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text = Templates.balance_info(user)
    
    keyboard = [
        [
            InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_balance"),
            InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
        ],
        [
            InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
            InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.BALANCE_MENU

async def handle_add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    keyboard = [
        [
            InlineKeyboardButton("10,000 KRW", callback_data="add_10000"),
            InlineKeyboardButton("30,000 KRW", callback_data="add_30000")
        ],
        [
            InlineKeyboardButton("50,000 KRW", callback_data="add_50000"),
            InlineKeyboardButton("100,000 KRW", callback_data="add_100000")
        ],
        [InlineKeyboardButton("üí¨ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="add_custom")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.ADD_BALANCE

async def handle_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = int(update.message.text.replace(",", ""))
        if amount < 10000:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10,000 KRW")
            
        payment_id = f"PAY{update.effective_user.id}_{int(datetime.now().timestamp())}"
        db.add_payment(payment_id, update.effective_user.id, amount)
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data=f"pay_card_{payment_id}")],
            [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"pay_bank_{payment_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="balance")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{'='*35}\n"
            f"üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n"
            f"{'='*35}\n\n"
            f"–°—É–º–º–∞: *{amount:,} KRW*\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
            f"{'='*35}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return States.PAYMENT_METHOD
        
    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå *–û—à–∏–±–∫–∞*\n\n{str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É",
            parse_mode='Markdown'
        )
        return States.ADD_BALANCE

async def handle_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    user = db.get_user(update.effective_user.id)
    
    if not user['is_verified']:
        await update.message.reply_text(
            "‚ùå *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
            parse_mode='Markdown'
        )
        return States.BALANCE_MENU
    
    if user['balance'] < 50000:
        await update.message.reply_text(
            "‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50,000 KRW",
            parse_mode='Markdown'
        )
        return States.BALANCE_MENU
    
    keyboard = [
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç", callback_data="withdraw_bank")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="balance")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{'='*35}\n"
        f"üí∞ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n"
        f"{'='*35}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: *{user['balance']:,} KRW*\n"
        f"–ú–∏–Ω–∏–º—É–º: 50,000 KRW\n"
        f"–ö–æ–º–∏—Å—Å–∏—è: 1%\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:\n"
        f"{'='*35}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.WITHDRAW_METHOD

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ... 