from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from states.states import States
from database.db import Database
from config.settings import ADMIN_USERNAME, CHANNEL_ID
from utils.templates import Templates

db = Database('board.db')

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    if update.effective_user.username != ADMIN_USERNAME:
        return
        
    keyboard = [
        [
            InlineKeyboardButton("üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="mod_ads"),
            InlineKeyboardButton("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="mod_verify")
        ],
        [
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="mod_users"),
            InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="mod_finance")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="mod_settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{'='*35}\n"
        f"üë®‚Äçüíº *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
        f"{'='*35}\n\n"
        f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
        f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
        f"‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        f"‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        f"{'='*35}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.ADMIN_MENU

async def moderate_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    ads = db.get_pending_ads()
    if not ads:
        await query.message.edit_text(
            f"{'='*35}\n"
            f"‚úÖ *–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n"
            f"{'='*35}\n\n"
            f"–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            f"{'='*35}",
            parse_mode='Markdown'
        )
        return States.ADMIN_MENU
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    ad = ads[0]
    context.user_data['current_ad'] = ad
    
    user = db.get_user(ad['user_id'])
    text = Templates.ad_card(ad, user)
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_ad_{ad['id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_ad_{ad['id']}")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if ad['image_file_id']:
        await query.message.reply_photo(
            photo=ad['image_file_id'],
            caption=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await query.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    return States.ADMIN_MODERATE

async def approve_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    ad_id = int(query.data.split('_')[2])
    ad = db.get_ad(ad_id)
    
    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    text = Templates.ad_card(ad, db.get_user(ad['user_id']))
    
    if ad['image_file_id']:
        message = await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=ad['image_file_id'],
            caption=text,
            parse_mode='Markdown'
        )
    else:
        message = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=text,
            parse_mode='Markdown'
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    db.approve_ad(ad_id, message.message_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(
        chat_id=ad['user_id'],
        text=f"{'='*35}\n"
             f"‚úÖ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ*\n"
             f"{'='*35}\n\n"
             f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
             f"–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!\n"
             f"{'='*35}",
        parse_mode='Markdown'
    )
    
    await moderate_ads(update, context)

async def reject_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    ad_id = int(query.data.split('_')[2])
    context.user_data['reject_ad_id'] = ad_id
    
    keyboard = [
        [InlineKeyboardButton("üìù –°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="reject_custom")],
        [
            InlineKeyboardButton("üö´ –°–ø–∞–º", callback_data="reject_spam"),
            InlineKeyboardButton("üîû 18+", callback_data="reject_18plus")
        ],
        [
            InlineKeyboardButton("üìÑ –§–æ—Ä–º–∞—Ç", callback_data="reject_format"),
            InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="reject_price")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        f"{'='*35}\n"
        f"‚ùå *–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è*\n"
        f"{'='*35}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n"
        f"{'='*35}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.ADMIN_REJECT_REASON

async def handle_reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    reason = {
        'reject_spam': '–°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
        'reject_18plus': '–ö–æ–Ω—Ç–µ–Ω—Ç 18+',
        'reject_format': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
        'reject_price': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞',
        'reject_custom': None
    }.get(query.data)
    
    if reason is None:
        await query.message.edit_text(
            f"{'='*35}\n"
            f"üìù *–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è*\n"
            f"{'='*35}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è\n"
            f"–æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            f"{'='*35}",
            parse_mode='Markdown'
        )
        return States.ADMIN_CUSTOM_REASON
    
    ad_id = context.user_data['reject_ad_id']
    db.reject_ad(ad_id, reason)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ad = db.get_ad(ad_id)
    await context.bot.send_message(
        chat_id=ad['user_id'],
        text=f"{'='*35}\n"
             f"‚ùå *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ*\n"
             f"{'='*35}\n\n"
             f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
             f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è\n"
             f"–∏ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
             f"{'='*35}",
        parse_mode='Markdown'
    )
    
    await moderate_ads(update, context)

async def handle_verification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    requests = db.get_pending_verifications()
    if not requests:
        await query.message.edit_text(
            f"{'='*35}\n"
            f"‚úÖ *–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n"
            f"{'='*35}\n\n"
            f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\n"
            f"{'='*35}",
            parse_mode='Markdown'
        )
        return States.ADMIN_MENU
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
    req = requests[0]
    context.user_data['current_verification'] = req
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"verify_approve_{req['verification_id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"verify_reject_{req['verification_id']}")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=req['document_photo'],
        caption=f"{'='*35}\n"
                f"üìÑ *–î–æ–∫—É–º–µ–Ω—Ç*\n"
                f"{'='*35}",
        parse_mode='Markdown'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–ª—Ñ–∏
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=req['selfie_photo'],
        caption=f"{'='*35}\n"
                f"ü§≥ *–°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º*\n"
                f"{'='*35}\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['username']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {req['address']}\n"
                f"{'='*35}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.ADMIN_VERIFY

async def handle_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="users_search"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="users_stats")
        ],
        [
            InlineKeyboardButton("üö´ –ë–∞–Ω-–ª–∏—Å—Ç", callback_data="users_banned"),
            InlineKeyboardButton("üíé PRO", callback_data="users_pro")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    stats = db.get_users_stats()
    
    await query.message.edit_text(
        f"{'='*35}\n"
        f"üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n"
        f"{'='*35}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n"
        f"‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {stats['verified']}\n"
        f"‚Ä¢ PRO: {stats['pro']}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['banned']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        f"{'='*35}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.ADMIN_USERS

async def handle_finance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="finance_payments"),
            InlineKeyboardButton("üí∞ –í—ã–≤–æ–¥—ã", callback_data="finance_withdrawals")
        ],
        [
            InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="finance_promos"),
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="finance_reports")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    stats = db.get_finance_stats()
    
    await query.message.edit_text(
        f"{'='*35}\n"
        f"üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏*\n"
        f"{'='*35}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats['payments_count']}\n"
        f"‚Ä¢ –ù–∞ —Å—É–º–º—É: {stats['payments_sum']:,} KRW\n"
        f"‚Ä¢ –í—ã–≤–æ–¥–æ–≤: {stats['withdrawals_count']}\n"
        f"‚Ä¢ –ù–∞ —Å—É–º–º—É: {stats['withdrawals_sum']:,} KRW\n\n"
        f"üíé *PRO-–∞–∫–∫–∞—É–Ω—Ç—ã:*\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {stats['pro_activations']}\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥: {stats['pro_income']:,} KRW\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
        f"{'='*35}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return States.ADMIN_FINANCE

async def handle_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    action, ad_id = query.data.split('_')
    ad_id = int(ad_id)
    
    ad = db.get_ad(ad_id)
    if not ad:
        await query.edit_message_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    user_id = ad['user_id']
    
    if action == 'approve':
        db.update_ad_status(ad_id, 'published')
        await query.edit_message_text(
            f"{query.message.text}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ"
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"
        )
        
    elif action == 'reject':
        db.update_ad_status(ad_id, 'rejected')
        await query.edit_message_text(
            f"{query.message.text}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
        )

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ... 